name: Deploy ArgoCD

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.16.2'

      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          if [ -z "${KUBECONFIG_B64}" ]; then
            echo "::error::KUBECONFIG_B64 secret is not set"
            exit 1
          fi
          echo "${KUBECONFIG_B64}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}

      - name: Verify Kubeconfig
        run: |
          kubectl cluster-info || { echo "::error::Failed to connect to Kubernetes cluster"; exit 1; }

      - name: Add Helm Repositories
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
        continue-on-error: true

      - name: Install Cert-Manager
        run: |
          bash ./scripts/apply-cert-manager-prereqs.sh
        continue-on-error: false

      - name: Verify ArgoCD TLS Secret
        run: |
          kubectl get secret argocd-tls-secret -n istio-system || { echo "::error::Secret argocd-tls-secret not found in istio-system namespace"; exit 1; }
        continue-on-error: false

      - name: Deploy ArgoCD
        run: |
          bash ./scripts/install-argocd.sh
        continue-on-error: false

      - name: Deploy Istio Gateway and VirtualService
        run: |
          bash ./scripts/apply-istio-resources.sh
        continue-on-error: false

      - name: Verify Deployments
        run: |
          kubectl get pods -n argocd -o wide || { echo "::error::Failed to list pods"; exit 1; }
          kubectl get svc -n argocd || { echo "::error::Failed to list services"; exit 1; }
          kubectl get gateway -n argocd || { echo "::error::Failed to list gateways"; exit 1; }
          kubectl get virtualservice -n argocd || { echo "::error::Failed to list virtualservices"; exit 1; }
        continue-on-error: true

      - name: Cleanup
        if: always()
        run: |
          rm -f $HOME/.kube/config